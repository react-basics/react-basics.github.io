{"version":3,"sources":["../static/js/87.25ed7085.chunk.js","../node_modules/prismjs/components/prism-php.js"],"names":["webpackJsonp","231","module","exports","Prism","languages","php","extend","keyword","constant","comment","pattern","lookbehind","insertBefore","shell-comment","alias","delimiter","variable","package","inside","punctuation","property","nowdoc-string","greedy","heredoc-string","interpolation","single-quoted-string","double-quoted-string","string_interpolation","rest","markup","hooks","add","env","language","test","code","tokenStack","backupCode","replace","match","i","length","indexOf","grammar","keys","Object","k","t","highlightedCode","highlight","element","innerHTML"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,ICSxB,SAAAC,GACAA,EAAAC,UAAAC,IAAAF,EAAAC,UAAAE,OAAA,SACAC,QAAA,4aACAC,SAAA,oBACAC,SACAC,QAAA,uCACAC,YAAA,KAIAR,EAAAC,UAAAQ,aAAA,gBACAC,iBACAH,QAAA,eACAC,YAAA,EACAG,MAAA,aAIAX,EAAAC,UAAAQ,aAAA,iBACAG,WACAL,QAAA,qBACAI,MAAA,aAEAE,SAAA,sBACAC,SACAP,QAAA,kCACAC,YAAA,EACAO,QACAC,YAAA,SAMAhB,EAAAC,UAAAQ,aAAA,kBACAQ,UACAV,QAAA,YACAC,YAAA,KAIAR,EAAAC,UAAAQ,aAAA,gBACAS,iBACAX,QAAA,kDACAY,QAAA,EACAR,MAAA,SACAI,QACAH,WACAL,QAAA,2BACAI,MAAA,SACAI,QACAC,YAAA,mBAKAI,kBACAb,QAAA,sGACAY,QAAA,EACAR,MAAA,SACAI,QACAH,WACAL,QAAA,yCACAI,MAAA,SACAI,QACAC,YAAA,iBAGAK,cAAA,OAGAC,wBACAf,QAAA,yBACAY,QAAA,EACAR,MAAA,UAEAY,wBACAhB,QAAA,yBACAY,QAAA,EACAR,MAAA,SACAI,QACAM,cAAA,eAKArB,GAAAC,UAAAC,IAAA,MAEA,IAAAsB,IACAjB,QAAA,6EACAC,YAAA,EACAO,QACAU,KAAAzB,EAAAC,UAAAC,KAGAF,GAAAC,UAAAC,IAAA,kBAAAa,OAAA,cAAAS,EACAxB,EAAAC,UAAAC,IAAA,wBAAAa,OAAA,cAAAS,EAGAxB,EAAAC,UAAAyB,SAIA1B,EAAA2B,MAAAC,IAAA,4BAAAC,GACA,QAAAA,EAAAC,UAAA,mBAAAC,KAAAF,EAAAG,QAIAH,EAAAI,cAEAJ,EAAAK,WAAAL,EAAAG,KACAH,EAAAG,KAAAH,EAAAG,KAAAG,QAAA,6CAAAC,GAGA,IAFA,GAAAC,GAAAR,EAAAI,WAAAK,QAEA,IAAAT,EAAAK,WAAAK,QAAA,SAAAF,EAAA,UACAA,CAKA,OAFAR,GAAAI,WAAAI,GAAAD,EAEA,SAAAC,EAAA,QAIAR,EAAAW,QAAAxC,EAAAC,UAAAyB,UAIA1B,EAAA2B,MAAAC,IAAA,yBAAAC,GACA,QAAAA,EAAAC,UAAAD,EAAAK,aACAL,EAAAG,KAAAH,EAAAK,iBACAL,GAAAK,cAKAlC,EAAA2B,MAAAC,IAAA,2BAAAC,GACA,WAAAA,EAAAC,UAAAD,EAAAI,WAAA,CAKAJ,EAAAW,QAAAxC,EAAAC,UAAAC,GAEA,QAAAmC,GAAA,EAAAI,EAAAC,OAAAD,KAAAZ,EAAAI,YAAsDI,EAAAI,EAAAH,SAAiBD,EAAA,CACvE,GAAAM,GAAAF,EAAAJ,GACAO,EAAAf,EAAAI,WAAAU,EAGAd,GAAAgB,gBAAAhB,EAAAgB,gBAAAV,QAAA,SAAAQ,EAAA,MACA,wCACA3C,EAAA8C,UAAAF,EAAAf,EAAAW,QAAA,OAAAL,QAAA,cACA,WAGAN,EAAAkB,QAAAC,UAAAnB,EAAAgB,qBAGC7C","file":"static/js/87.25ed7085.chunk.js","sourcesContent":["webpackJsonp([87],{\n\n/***/ 231:\n/***/ (function(module, exports) {\n\n/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>|<\\?(?:php|=)?/i,\n\t\t\talias: 'important'\n\t\t},\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\trest: Prism.languages.php\n\t\t}\n\t};\n\tPrism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n\tPrism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n\n\t// Add HTML support if the markup language exists\n\tif (Prism.languages.markup) {\n\n\t\t// Tokenize all inline PHP blocks that are wrapped in <?php ?>\n\t\t// This allows for easy PHP + markup highlighting\n\t\tPrism.hooks.add('before-highlight', function (env) {\n\t\t\tif (env.language !== 'php' || !/(?:<\\?php|<\\?)/ig.test(env.code)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tenv.tokenStack = [];\n\n\t\t\tenv.backupCode = env.code;\n\t\t\tenv.code = env.code.replace(/(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig, function (match) {\n\t\t\t\tvar i = env.tokenStack.length;\n\t\t\t\t// Check for existing strings\n\t\t\t\twhile (env.backupCode.indexOf('___PHP' + i + '___') !== -1)\n\t\t\t\t\t++i;\n\n\t\t\t\t// Create a sparse array\n\t\t\t\tenv.tokenStack[i] = match;\n\n\t\t\t\treturn '___PHP' + i + '___';\n\t\t\t});\n\n\t\t\t// Switch the grammar to markup\n\t\t\tenv.grammar = Prism.languages.markup;\n\t\t});\n\n\t\t// Restore env.code for other plugins (e.g. line-numbers)\n\t\tPrism.hooks.add('before-insert', function (env) {\n\t\t\tif (env.language === 'php' && env.backupCode) {\n\t\t\t\tenv.code = env.backupCode;\n\t\t\t\tdelete env.backupCode;\n\t\t\t}\n\t\t});\n\n\t\t// Re-insert the tokens after highlighting\n\t\tPrism.hooks.add('after-highlight', function (env) {\n\t\t\tif (env.language !== 'php' || !env.tokenStack) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Switch the grammar back\n\t\t\tenv.grammar = Prism.languages.php;\n\n\t\t\tfor (var i = 0, keys = Object.keys(env.tokenStack); i < keys.length; ++i) {\n\t\t\t\tvar k = keys[i];\n\t\t\t\tvar t = env.tokenStack[k];\n\n\t\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\t\tenv.highlightedCode = env.highlightedCode.replace('___PHP' + k + '___',\n\t\t\t\t\t\"<span class=\\\"token php language-php\\\">\" +\n\t\t\t\t\tPrism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$') +\n\t\t\t\t\t\"</span>\");\n\t\t\t}\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\t\t});\n\t}\n}(Prism));\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/87.25ed7085.chunk.js","/**\n * Original by Aaron Harun: http://aahacreative.com/2012/07/31/php-syntax-highlighting-prism/\n * Modified by Miles Johnson: http://milesj.me\n *\n * Supports the following:\n * \t\t- Extends clike syntax\n * \t\t- Support for PHP 5.3+ (namespaces, traits, generators, etc)\n * \t\t- Smarter constant and function matching\n *\n * Adds the following new token classes:\n * \t\tconstant, delimiter, variable, function, package\n */\n(function (Prism) {\n\tPrism.languages.php = Prism.languages.extend('clike', {\n\t\t'keyword': /\\b(?:and|or|xor|array|as|break|case|cfunction|class|const|continue|declare|default|die|do|else|elseif|enddeclare|endfor|endforeach|endif|endswitch|endwhile|extends|for|foreach|function|include|include_once|global|if|new|return|static|switch|use|require|require_once|var|while|abstract|interface|public|implements|private|protected|parent|throw|null|echo|print|trait|namespace|final|yield|goto|instanceof|finally|try|catch)\\b/i,\n\t\t'constant': /\\b[A-Z0-9_]{2,}\\b/,\n\t\t'comment': {\n\t\t\tpattern: /(^|[^\\\\])(?:\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*)/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'shell-comment': {\n\t\t\tpattern: /(^|[^\\\\])#.*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'keyword', {\n\t\t'delimiter': {\n\t\t\tpattern: /\\?>|<\\?(?:php|=)?/i,\n\t\t\talias: 'important'\n\t\t},\n\t\t'variable': /\\$+(?:\\w+\\b|(?={))/i,\n\t\t'package': {\n\t\t\tpattern: /(\\\\|namespace\\s+|use\\s+)[\\w\\\\]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\tpunctuation: /\\\\/\n\t\t\t}\n\t\t}\n\t});\n\n\t// Must be defined after the function pattern\n\tPrism.languages.insertBefore('php', 'operator', {\n\t\t'property': {\n\t\t\tpattern: /(->)[\\w]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('php', 'string', {\n\t\t'nowdoc-string': {\n\t\t\tpattern: /<<<'([^']+)'(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<'[^']+'|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<'?|[';]$/\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t'heredoc-string': {\n\t\t\tpattern: /<<<(?:\"([^\"]+)\"(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\1;|([a-z_]\\w*)(?:\\r\\n?|\\n)(?:.*(?:\\r\\n?|\\n))*?\\2;)/i,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^<<<(?:\"[^\"]+\"|[a-z_]\\w*)|[a-z_]\\w*;$/i,\n\t\t\t\t\talias: 'symbol',\n\t\t\t\t\tinside: {\n\t\t\t\t\t\t'punctuation': /^<<<\"?|[\";]$/\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t},\n\t\t'single-quoted-string': {\n\t\t\tpattern: /'(?:\\\\[\\s\\S]|[^\\\\'])*'/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string'\n\t\t},\n\t\t'double-quoted-string': {\n\t\t\tpattern: /\"(?:\\\\[\\s\\S]|[^\\\\\"])*\"/,\n\t\t\tgreedy: true,\n\t\t\talias: 'string',\n\t\t\tinside: {\n\t\t\t\t'interpolation': null // See below\n\t\t\t}\n\t\t}\n\t});\n\t// The different types of PHP strings \"replace\" the C-like standard string\n\tdelete Prism.languages.php['string'];\n\n\tvar string_interpolation = {\n\t\tpattern: /{\\$(?:{(?:{[^{}]+}|[^{}]+)}|[^{}])+}|(^|[^\\\\{])\\$+(?:\\w+(?:\\[.+?]|->\\w+)*)/,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\trest: Prism.languages.php\n\t\t}\n\t};\n\tPrism.languages.php['heredoc-string'].inside['interpolation'] = string_interpolation;\n\tPrism.languages.php['double-quoted-string'].inside['interpolation'] = string_interpolation;\n\n\t// Add HTML support if the markup language exists\n\tif (Prism.languages.markup) {\n\n\t\t// Tokenize all inline PHP blocks that are wrapped in <?php ?>\n\t\t// This allows for easy PHP + markup highlighting\n\t\tPrism.hooks.add('before-highlight', function (env) {\n\t\t\tif (env.language !== 'php' || !/(?:<\\?php|<\\?)/ig.test(env.code)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tenv.tokenStack = [];\n\n\t\t\tenv.backupCode = env.code;\n\t\t\tenv.code = env.code.replace(/(?:<\\?php|<\\?)[\\s\\S]*?(?:\\?>|$)/ig, function (match) {\n\t\t\t\tvar i = env.tokenStack.length;\n\t\t\t\t// Check for existing strings\n\t\t\t\twhile (env.backupCode.indexOf('___PHP' + i + '___') !== -1)\n\t\t\t\t\t++i;\n\n\t\t\t\t// Create a sparse array\n\t\t\t\tenv.tokenStack[i] = match;\n\n\t\t\t\treturn '___PHP' + i + '___';\n\t\t\t});\n\n\t\t\t// Switch the grammar to markup\n\t\t\tenv.grammar = Prism.languages.markup;\n\t\t});\n\n\t\t// Restore env.code for other plugins (e.g. line-numbers)\n\t\tPrism.hooks.add('before-insert', function (env) {\n\t\t\tif (env.language === 'php' && env.backupCode) {\n\t\t\t\tenv.code = env.backupCode;\n\t\t\t\tdelete env.backupCode;\n\t\t\t}\n\t\t});\n\n\t\t// Re-insert the tokens after highlighting\n\t\tPrism.hooks.add('after-highlight', function (env) {\n\t\t\tif (env.language !== 'php' || !env.tokenStack) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Switch the grammar back\n\t\t\tenv.grammar = Prism.languages.php;\n\n\t\t\tfor (var i = 0, keys = Object.keys(env.tokenStack); i < keys.length; ++i) {\n\t\t\t\tvar k = keys[i];\n\t\t\t\tvar t = env.tokenStack[k];\n\n\t\t\t\t// The replace prevents $$, $&, $`, $', $n, $nn from being interpreted as special patterns\n\t\t\t\tenv.highlightedCode = env.highlightedCode.replace('___PHP' + k + '___',\n\t\t\t\t\t\"<span class=\\\"token php language-php\\\">\" +\n\t\t\t\t\tPrism.highlight(t, env.grammar, 'php').replace(/\\$/g, '$$$$') +\n\t\t\t\t\t\"</span>\");\n\t\t\t}\n\n\t\t\tenv.element.innerHTML = env.highlightedCode;\n\t\t});\n\t}\n}(Prism));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/prismjs/components/prism-php.js\n// module id = 231\n// module chunks = 87"],"sourceRoot":""}